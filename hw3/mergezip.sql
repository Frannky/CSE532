-- 5.Write SQL queries or stored procedure mergezip.sql to merge zip code areas into large ones with
-- neighboring zip code areas, so that the new population in each zip code is large than the current
-- average population, using the zip code population table in Homework1. For simplicity,  you can
-- remove the duplicates from the population table.

DROP TABLE CSE532.COPY_USZIP;
DROP TABLE CSE532.RECURSIVE;
DROP TABLE CSE532.RESULT;
DROP INDEX ZIPCODE_INDEX;

CREATE TABLE CSE532.COPY_USZIP(
    ZCTA5CE10 VARCHAR(5) NOT NULL,
    SHAPE DB2GSE.ST_MULTIPOLYGON NOT NULL
);

INSERT INTO CSE532.COPY_USZIP SELECT ZCTA5CE10, SHAPE FROM CSE532.USZIP;

ALTER TABLE CSE532.COPY_USZIP ADD COLUMN ZIPPOP DECIMAL(20,10);
UPDATE CSE532.COPY_USZIP SET CSE532.COPY_USZIP.ZIPPOP = (SELECT CSE532.ZIPPOP.ZPOP FROM CSE532.ZIPPOP
WHERE CSE532.ZIPPOP.ZIP = CSE532.COPY_USZIP.ZCTA5CE10 AND CSE532.ZIPPOP.ZPOP IS NOT NULL FETCH FIRST 1 ROWS ONLY);

ALTER TABLE CSE532.COPY_USZIP ADD COLUMN NEIGHBOR VARCHAR(5000);
CREATE TABLE CSE532.RECURSIVE(ZIPCODE VARCHAR(5));

CREATE TABLE CSE532.RESULT(ZIPCODES VARCHAR(5000));
CREATE INDEX ZIPCODE_INDEX ON CSE532.COPY_USZIP(ZCTA5CE10);

CREATE OR REPLACE PROCEDURE MERGE_ZIPCODE()
    LANGUAGE SQL
BEGIN
    DECLARE NEXT VARCHAR(5000) DEFAULT '';
    DECLARE SQL_STATEMENT VARCHAR(5000) DEFAULT '';
    DECLARE CURRENT_ZIPCODE CHAR(5) DEFAULT '';
    DECLARE AVERAGE_POPULATION DOUBLE;
    DECLARE TOTAL_POPULATION DECIMAL(20,10);

    FOR CURSOR AS (SELECT USZIP_FIRST.ZCTA5CE10 AS ZIP_FIRST, USZIP_SECOND.ZCTA5CE10 AS ZIP_SECOND, USZIP_FIRST.ZIPPOP AS ZIPPOP_FIRST, USZIP_SECOND.ZIPPOP AS ZIPPOP_SECOND FROM CSE532.COPY_USZIP USZIP_FIRST INNER JOIN CSE532.COPY_USZIP USZIP_SECOND ON DB2GSE.ST_TOUCHES(USZIP_FIRST.SHAPE, USZIP_SECOND.SHAPE) = 1 AND USZIP_FIRST.ZCTA5CE10 <> USZIP_SECOND.ZCTA5CE10 ORDER BY USZIP_FIRST.ZCTA5CE10 FETCH FIRST 20000 ROWS ONLY)
        DO
            IF (CURRENT_ZIPCODE = '') THEN
                SET NEXT = CURSOR.ZIP_SECOND;
            ELSEIF (CURRENT_ZIPCODE <> '' AND CURRENT_ZIPCODE <> CURSOR.ZIP_FIRST) THEN
                SET SQL_STATEMENT = 'UPDATE CSE532.COPY_USZIP SET NEIGHBOR = ''' CONCAT NEXT CONCAT ''' WHERE ZCTA5CE10 = ''' CONCAT CURRENT_ZIPCODE CONCAT '''';
                EXECUTE IMMEDIATE SQL_STATEMENT;
                SET NEXT = CURSOR.ZIP_SECOND;
                SET SQL_STATEMENT = 'INSERT INTO CSE532.RECURSIVE VALUES (''' CONCAT CURRENT_ZIPCODE CONCAT ''')';
                EXECUTE IMMEDIATE SQL_STATEMENT;
            ELSE
                SET NEXT = NEXT CONCAT ', ' CONCAT CURSOR.ZIP_SECOND;
            END IF;
            SET CURRENT_ZIPCODE = CURSOR.ZIP_FIRST;

            SET AVERAGE_POPULATION = (SELECT AVG(ZPOP) FROM CSE532.ZIPPOP);
            IF (CURSOR.ZIPPOP_SECOND < AVERAGE_POPULATION) THEN
                IF (NOT EXISTS(SELECT ZIPCODE FROM CSE532.RECURSIVE WHERE ZIPCODE = CURSOR.ZIP_FIRST)) THEN
                    SET TOTAL_POPULATION = NVL(CURSOR.ZIPPOP_FIRST,0) + NVL(CURSOR.ZIPPOP_SECOND,0);
                    SET SQL_STATEMENT = 'UPDATE CSE532.COPY_USZIP SET ZIPPOP = ' CONCAT TOTAL_POPULATION CONCAT ' WHERE ZCTA5CE10 = ''' CONCAT CURSOR.ZIP_FIRST CONCAT '''';
                    EXECUTE IMMEDIATE SQL_STATEMENT;
                    SET SQL_STATEMENT = 'INSERT INTO CSE532.RESULT VALUES (''' CONCAT CURSOR.ZIP_FIRST CONCAT ', ' CONCAT CURSOR.ZIP_SECOND CONCAT ''')';
                    EXECUTE IMMEDIATE SQL_STATEMENT;
                    SET SQL_STATEMENT = 'INSERT INTO CSE532.RECURSIVE VALUES (''' CONCAT CURSOR.ZIP_SECOND CONCAT ''')';
                    EXECUTE IMMEDIATE SQL_STATEMENT;
                END IF;
            END IF;
        END FOR;
END;

CALL MERGE_ZIPCODE();

WITH AV AS(SELECT AVG(ZPOP) AS AVER FROM CSE532.ZIPPOP)
SELECT * FROM CSE532.COPY_USZIP AS A, AV AS B WHERE A.NEIGHBOR IS NOT NULL AND A.ZIPPOP > B.AVER;
